from typing import Dict
from os import environ

from kubernetes import client, config

from .analysis_runner import AnalysisRunner
from starcar import app, db
from starcar.models import APIKey

if app.config["DEBUG"] is True:
    raise ImportError("Can't import KubeAnalysisRunner while in testing environment")

# TODO: Load in
analysis_config = [{
  "name": "analysis-one",
  "image_name": "pateichler/starcar-analysis1:latest"
}]


class KubeAnalysisRunner(AnalysisRunner):

    def __init__(self):
        config.load_incluster_config()
        self.api_instance = client.BatchV1Api()
        # API route for analysis containers
        self.api_route = environ.get("API_ROUTE")

    def create_job_object(self, name: str, image_name: str, envs: Dict[str, str]):
        k_envs = [client.V1EnvVar(name=k, value=v) for k, v in envs.items()]

        container = client.V1Container(
            name=name,
            image=image_name,
            env=k_envs)
        
        template = client.V1PodTemplateSpec(
            metadata=client.V1ObjectMeta(labels={"app": "analysis"}),
            spec=client.V1PodSpec(
                restart_policy="Never", containers=[container])
            )
        
        spec = client.V1JobSpec(
            template=template,
            backoff_limit=2)
        
        job = client.V1Job(
            api_version="batch/v1",
            kind="Job",
            metadata=client.V1ObjectMeta(name=name),
            spec=spec)

        return job

    def create_job(self, job, namespace):
        return self.api_instance.create_namespaced_job(
            body=job,
            namespace=namespace)

    def run_job(self, name: str, image_name: str, api_key: str, mission_id: int):
        envs = {
            "API_KEY": api_key,
            "MISSION_ID": str(mission_id)
        }
        
        if self.api_route is not None:
            envs["API_ROUTE"] = self.api_route
        
        job = self.create_job_object(name, image_name, envs)
        namespace = environ.get("JOB_NAMESPACE", "starcar")

        response = self.create_job(job, namespace)
        print(f"Job created. status='{str(response.status)}'")

    def run_analysis(self, mission_id: int):
        api_key_obj, api_key_val = APIKey.generate(
            f'Analysis - mission {mission_id}', 1, 
            "Auto-generated by analysis runner"
        )
        db.session.commit()

        for c in analysis_config:
            job_name = f'{c["name"]}-mission-{mission_id}'
            self.run_job(job_name, c["image_name"], api_key_val, mission_id)
